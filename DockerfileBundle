# build: docker build -t cronicle:bundle -f DockerfileBundle --build-arg echo=1  .
# docker tag cronicle:bundle cronicle/cronicle:edge
# test run: docker run --rm -it  -p 3019:3012 -e CRONICLE_manager=1 cronicle:bundle bash
# then type manager or worker

FROM alpine:3.16 as build
RUN apk add --no-cache git bash nodejs npm 
ARG echo
RUN echo $echo
WORKDIR /opt/cronicle
#RUN git clone https://github.com/cronicle-edge/cronicle-edge . && ./bundle.sh
COPY . . 
RUN ./bundle.sh

# copy level db binaries
RUN mkdir -p dist/bin/engines/prebuilds/linux-x64 && cp node_modules/classic-level/prebuilds/linux-x64/node.napi.musl.node dist/bin/engines/prebuilds/linux-x64/

# FROM alpine:3.16
# RUN apk add --no-cache git nodejs tini util-linux bash openssl procps coreutils curl tar jq
# required: all: tini; alpine: util-linux procps coreutils
FROM cronicle/cronicle:base 

ENV CRONICLE_foreground=1
ENV CRONICLE_echo=1
ENV TZ=America/New_York 
ENV EDITOR=vi

ENV PATH "/opt/cronicle/bin:${PATH}"

# non root user for shell plugin
ARG CRONICLE_UID=1007
ARG CRONICLE_GID=1099
RUN  addgroup cronicle --gid $CRONICLE_GID && adduser -D -h /opt/cronicle -u $CRONICLE_UID -G cronicle cronicle

COPY --from=build /opt/cronicle/dist /opt/cronicle
WORKDIR /opt/cronicle 

# optional  step to fix vulnerabilities reported by npm
# RUN npm audit fix --force


# protect sensitive folders
RUN  mkdir -p /opt/cronicle/data /opt/cronicle/conf && chmod 0700 /opt/cronicle/data /opt/cronicle/conf

ENTRYPOINT ["/sbin/tini", "--"]
