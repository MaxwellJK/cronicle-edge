# Cronicle Data Export v1.0
# Hostname: local
# Date/Time: Mon Dec 27 2021 06:20:45 GMT+0000 (Coordinated Universal Time)
# Format: KEY - JSON

users/admin - {"username":"admin","password":"$2a$10$VAF.FNvz1JqhCAB5rCh9GOa965eYWH3fcgWIuQFAmsZnnVS/.ye1y","full_name":"Administrator","email":"admin@cronicle.com","active":1,"modified":1612277068,"created":1612277068,"salt":"salty","privileges":{"admin":1}}
global/users - {"page_size":100,"first_page":0,"last_page":0,"length":1,"type":"list"}
global/users/0 - {"type":"list_page","items":[{"username":"admin"}]}
global/categories - {"page_size":50,"first_page":0,"last_page":0,"length":4,"type":"list"}
global/categories/0 - {"type":"list_page","items":[{"title":"Admin","description":"","max_children":0,"notify_success":"","notify_fail":"","web_hook":"","enabled":1,"gcolor":"#f4d03f","id":"ckksife2k01","modified":1612542932,"created":1612542932,"username":"admin"},{"title":"Chain","description":"","max_children":0,"notify_success":"","notify_fail":"","web_hook":"","enabled":1,"gcolor":"#58d68d","id":"ckkqcfxkg26","modified":1612411947,"created":1612411947,"username":"admin"},{"title":"Demo","description":"","max_children":0,"notify_success":"","notify_fail":"","web_hook":"","enabled":1,"gcolor":"#ec7063 ","id":"ckkog7wj41t","modified":1612297359,"created":1612297359,"username":"admin"},{"id":"general","title":"General","enabled":1,"username":"admin","modified":1612277068,"created":1612277068,"description":"For events that don't fit anywhere else.","gcolor":"#3498DB","max_children":0}]}
global/schedule - {"page_size":50,"first_page":0,"last_page":0,"length":14,"type":"list"}
global/schedule/0 - {"type":"list_page","items":[{"enabled":1,"params":{"wf_concur":"(sync)","wf_maxerr":"(None)","wf_strict":0},"timing":false,"max_children":1,"timeout":3600,"catch_up":0,"queue_max":1000,"timezone":"America/New_York","plugin":"workflow","title":"workflow_demo","silent":0,"graph_icon":"f111","args":"","ticks":"","category":"general","target":"allgrp","algo":"random","multiplex":0,"stagger":0,"workflow":[{"id":"ekkog584p1r","title":"00_wf_event","arg":"7","wait":false},{"id":"ekko472v803","title":"01_wf_step_one","arg":"","wait":false},{"id":"ekko473os04","title":"02_wf_step_two","arg":"LA","wait":false},{"id":"ekko474ip05","title":"03_wf_step_three","arg":"NY","wait":false}],"retries":0,"retry_delay":0,"detached":0,"queue":0,"chain":"","chain_error":"","notify_success":"","notify_fail":"","web_hook":"","web_hook_start":"","web_hook_error":0,"cpu_limit":0,"cpu_sustain":0,"memory_limit":0,"memory_sustain":0,"log_max_size":0,"notes":"","id":"ekxoae0xp0j","modified":1640585930,"created":1640585737,"username":"admin","salt":""},{"enabled":1,"params":{"script":"#!/usr/bin/env bash\n\n# set up data folder for git sync\n# once completed set git.enabled=true (will sync on pressing backup button, restart and shutdown)\n# for auto update set git.auto=true (to invoke git sync on each metadata change)\n\nUSER=\"cronicle\"\nPASSWORD=\"P@ssw0rd\"\nREPO=\"http://$USER:$PASSWORD@github.com/yourUser/yourRepo.git\"\n# or use ssh keys for auth if possible\n\nexport GIT_AUTHOR_NAME=\"cronicle\"\nexport GIT_COMMITER_NAME=\"cronicle\"\nexport EMAIL=\"admin@cronicle.com\"\n\ncd data && \\\ngit init && \\\ngit remote add origin $REPO && \\\ngit add global users  && \\\ngit commit -m \"Initial commit\" && \\\ngit branch --set-upstream-to=origin/master master && \\\ngit push -u origin master\n\n# later on you can configure user/email/branch and remote names in config file/keys\n# git.add option let you control what folders/files to sync:\n# global,users - (default) just metadata (schedules/events/users/etc)\n# global,users,logs - metadata + job history + activity log (10-20MB  per 5K jobs)\n# global,users,logs,jobs - to cover everything (~100-150MB per 5K jobs)\n\n# to debug git sync try to \"git push\" manually or check logs for \"Git Sync Error\"\n\n# next time while setting up cronicle on other machine just do \"git clone $REPO data\" instead of setup\n# if using cronicle-edge docker image just set GIT_REPO env variable to take care of it, e.g.\n# docker run -d -e GIT_REPO=$REPO -p 3012:3012 cronicle:edge manager","annotate":0,"json":0,"lang":"shell","theme":"default","sub_params":0,"tty":0},"timing":false,"max_children":1,"timeout":3600,"catch_up":0,"queue_max":1000,"timezone":"America/New_York","plugin":"shellplug","title":"gitInit","silent":0,"graph_icon":"f09b","args":"","ticks":"","category":"ckksife2k01","target":"allgrp","algo":"random","multiplex":0,"stagger":0,"retries":0,"retry_delay":0,"detached":0,"queue":0,"chain":"","chain_error":"","notify_success":"","notify_fail":"","web_hook":"","web_hook_start":"","web_hook_error":0,"cpu_limit":0,"cpu_sustain":0,"memory_limit":0,"memory_sustain":0,"log_max_size":0,"notes":"","id":"ekkrmrzb2h6","modified":1612543627,"created":1612489772,"username":"admin","salt":""},{"enabled":1,"params":{"script":"#!/usr/bin/env node\n\nlet stdin = JSON.parse(require(\"fs\").readFileSync(0));\n// stdin will contain some info about the job that is chaining this notification\n\nconst PixlMail = require('/opt/cronicle/node_modules/pixl-mail');\nconst mail = new PixlMail( 'mailrelay.cronicle.com', 25 );\n// mail.setOption( 'secure', true ); // use ssl\n// mail.setOption( 'auth', { user: 'fsmith', pass: '12345' } );\n\nlet body = `\n    Exit code: [chain_code]\n    Description: [chain_description]\n    Data: [chain_data]\n`\nlet message = \n    \"To: notify@cronicle.com\\n\" + \n    \"From: admin@cronicle.com\\n\" + \n    \"Subject: [source] failed\\n\" +\n    \"\\n\" +  body + \"\\n\" ;\n    \n\nmail.send( message, stdin, function(err) {\n    if (err) return console.log( \"Mail Error: \" + err );\n    console.log(\"message sent\");\n} );","annotate":0,"json":0,"lang":"javascript","theme":"default","sub_params":0,"tty":0},"timing":false,"max_children":1,"timeout":3600,"catch_up":0,"queue_max":1000,"timezone":"America/New_York","plugin":"shellplug","title":"notify","category":"ckksife2k01","target":"allgrp","algo":"random","multiplex":0,"stagger":0,"retries":0,"retry_delay":0,"detached":0,"queue":0,"chain":"","chain_error":"","notify_success":"","notify_fail":"","web_hook":"","cpu_limit":0,"cpu_sustain":0,"memory_limit":0,"memory_sustain":0,"log_max_size":0,"notes":"Randomly Generated Job","id":"ekkqcopde2a","modified":1612543044,"created":1612412357,"username":"admin","salt":"","silent":0,"graph_icon":"f0e0","args":"","ticks":"","web_hook_start":"","web_hook_error":0},{"enabled":1,"params":{"script":"#!/usr/bin/env bash\n\necho \"Chain 3\"\n\nsleep 2","annotate":0,"json":0,"lang":"shell","theme":"default","sub_params":0,"tty":0},"timing":false,"max_children":1,"timeout":3600,"catch_up":0,"queue_max":1000,"timezone":"America/New_York","plugin":"shellplug","category":"ckkqcfxkg26","title":"chain3","silent":0,"graph_icon":"f111","args":"","ticks":"","target":"allgrp","algo":"random","multiplex":0,"stagger":0,"retries":0,"retry_delay":0,"detached":0,"queue":0,"chain":"ekkqcgqiw27","chain_error":"","notify_success":"","notify_fail":"","web_hook":"","web_hook_start":"","web_hook_error":0,"cpu_limit":0,"cpu_sustain":0,"memory_limit":0,"memory_sustain":0,"log_max_size":0,"notes":"","salt":"","id":"ekkqchhlc29","modified":1612543706,"created":1612412020,"username":"admin"},{"enabled":1,"params":{"script":"#!/usr/bin/env bash\n\necho \"Chain 2\"\n\nsleep 2","annotate":0,"json":0,"lang":"shell","theme":"default","sub_params":0,"tty":0},"timing":false,"max_children":1,"timeout":3600,"catch_up":0,"queue_max":1000,"timezone":"America/New_York","plugin":"shellplug","category":"ckkqcfxkg26","title":"chain2","silent":0,"graph_icon":"f111","args":"","ticks":"","target":"allgrp","algo":"random","multiplex":0,"stagger":0,"retries":0,"retry_delay":0,"detached":0,"queue":0,"chain":"ekkqchhlc29","chain_error":"","notify_success":"","notify_fail":"","web_hook":"","web_hook_start":"","web_hook_error":0,"cpu_limit":0,"cpu_sustain":0,"memory_limit":0,"memory_sustain":0,"log_max_size":0,"notes":"","salt":"","id":"ekkqch38n28","modified":1612412112,"created":1612412001,"username":"admin"},{"enabled":1,"params":{"script":"#!/usr/bin/env bash\n\necho \"Chain 1\"\n\nsleep 2","annotate":0,"json":0,"lang":"shell","theme":"default","sub_params":0,"tty":0},"timing":false,"max_children":1,"timeout":3600,"catch_up":0,"queue_max":1000,"timezone":"America/New_York","plugin":"shellplug","category":"ckkqcfxkg26","title":"chain1","silent":0,"graph_icon":"f111","args":"","ticks":"","target":"allgrp","algo":"random","multiplex":0,"stagger":0,"retries":0,"retry_delay":0,"detached":0,"queue":0,"chain":"ekkqch38n28","chain_error":"","notify_success":"","notify_fail":"","web_hook":"","web_hook_start":"","web_hook_error":0,"cpu_limit":0,"cpu_sustain":0,"memory_limit":0,"memory_sustain":0,"log_max_size":0,"notes":"","id":"ekkqcgqiw27","modified":1612412033,"created":1612411985,"username":"admin","salt":""},{"enabled":1,"params":{"script":"#!/usr/bin/env python3\n\nimport os\nfrom pyspark import SparkContext, SparkConf\nfrom pyspark.sql import SparkSession\n\nconf = SparkConf()\n# place DB drivers into jars folder (e.g. /opt/cronicle/jars)\nconf.set(\"spark.driver.extraClassPath\", \"jars/*\");\nconf.set(\"spark.executor.extraClassPath\", \"jars/*\"); \n\nsc = SparkContext(conf = conf)\nspark = SparkSession(sc)\n\nurl = \"jdbc:mysql://127.0.0.1:3306/demo?user=root&password=root\"\n\ndf = spark \\\n  .read \\\n  .format(\"jdbc\") \\\n  .option(\"url\", url) \\\n  .option(\"query\", \"select * from mytable LIMIT 100\") \\\n  .load()\n\n# Looks the schema of this DataFrame.\ndf.show(10)\n\n# ! on alpine install gcompat: apk add gcompat\ndf.write.format(\"parquet\").mode(\"overwrite\").save(\"/tmp/data.parquet\")","annotate":0,"json":0,"lang":"python","theme":"solarized light","sub_params":0,"tty":0},"timing":false,"max_children":1,"timeout":3600,"catch_up":0,"queue_max":1000,"timezone":"America/New_York","plugin":"shellplug","title":"PySpark_Parquet","silent":0,"graph_icon":"f111","args":"","ticks":"","category":"ckkog7wj41t","target":"allgrp","algo":"random","multiplex":0,"stagger":0,"retries":0,"retry_delay":0,"detached":0,"queue":0,"chain":"","chain_error":"ekkqcopde2a","notify_success":"","notify_fail":"","web_hook":"","web_hook_start":"","web_hook_error":0,"cpu_limit":0,"cpu_sustain":0,"memory_limit":0,"memory_sustain":0,"log_max_size":0,"notes":"","salt":"","id":"ekkqcf9m725","modified":1612501484,"created":1612411916,"username":"admin"},{"enabled":1,"params":{"script":"#!/usr/bin/env python3\n\n# to install python/pyspark on alpine:\n# apk add python3 gcompat\n# pip3 install pyspark\n# make sure Java (open-jdk) is installed too\n\nimport sys\nfrom pyspark import SparkContext\nfrom pyspark.sql import SparkSession\n\nsc = SparkContext(\"local\", \"word count\")\nspark = SparkSession(sc)\n\ntext_file = sc.textFile(\"/etc/os-release\")\ncounts = text_file.flatMap(lambda line: line.split(\" \")) \\\n             .map(lambda word: (word, 1)) \\\n             .reduceByKey(lambda a, b: a + b)\ncounts.toDF([\"word\", \"count\"]).show(50)","annotate":0,"json":0,"lang":"python","theme":"solarized light","sub_params":0,"tty":0},"timing":false,"max_children":1,"timeout":3600,"catch_up":0,"queue_max":1000,"timezone":"America/New_York","plugin":"shellplug","title":"PySpark_Hello","silent":0,"graph_icon":"f111","args":"","ticks":"","category":"ckkog7wj41t","target":"allgrp","algo":"random","multiplex":0,"stagger":0,"retries":0,"retry_delay":0,"detached":0,"queue":0,"chain":"","chain_error":"ekkqcopde2a","notify_success":"","notify_fail":"","web_hook":"","web_hook_start":"","web_hook_error":0,"cpu_limit":0,"cpu_sustain":0,"memory_limit":0,"memory_sustain":0,"log_max_size":0,"notes":"","id":"ekkqcd1gb23","modified":1612543081,"created":1612411813,"username":"admin","salt":""},{"enabled":1,"params":{"script":"#!/usr/bin/env -S java --source 11 -cp \"jars/*\"\n\n// use Java 11 or higher to run code as script\n// if using modern syntax (e.g. var or textblocks) you might switch to Scala syntax\n\nimport java.io.*;\nimport java.net.*;\n\npublic class HttpRequestDemo {\n  \n   public static void main(String[] args) throws Exception\n   {\n     System.out.println(getHTML(\"http://www.example.com\"));\n   }\n\n   public static String getHTML(String urlToRead) throws Exception {\n      StringBuilder result = new StringBuilder();\n      URL url = new URL(urlToRead);\n      HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n      conn.setRequestMethod(\"GET\");\n      BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n      String line;\n      while ((line = rd.readLine()) != null) {\n         result.append(line);\n      }\n      rd.close();\n      return result.toString();\n   }\n}\n","annotate":0,"json":0,"lang":"java","theme":"darcula","sub_params":0,"tty":0},"timing":false,"max_children":1,"timeout":3600,"catch_up":0,"queue_max":1000,"timezone":"America/New_York","plugin":"shellplug","title":"java_demo","category":"ckkog7wj41t","target":"allgrp","algo":"random","multiplex":0,"stagger":0,"retries":0,"retry_delay":0,"detached":0,"queue":0,"chain":"","chain_error":"","notify_success":"","notify_fail":"","web_hook":"","cpu_limit":0,"cpu_sustain":0,"memory_limit":0,"memory_sustain":0,"log_max_size":0,"notes":"Randomly Generated Job","id":"ekkqa4w6s1a","modified":1612543529,"created":1612408073,"username":"admin","salt":"","silent":0,"graph_icon":"f111","args":"","ticks":"","web_hook_start":"","web_hook_error":0},{"enabled":1,"params":{"script":"#!/usr/bin/env bash\n\n# this event will be invoked by workflow event\n# you can get argument value using JOB_ARG variable\n\necho argument value: $JOB_ARG\nsleep $JOB_ARG","annotate":0,"json":0,"lang":"shell","theme":"default","sub_params":0},"timing":false,"max_children":3,"timeout":3600,"catch_up":0,"queue_max":1000,"timezone":"America/New_York","plugin":"shellplug","title":"00_wf_event","silent":0,"graph_icon":"f111","args":"","ticks":"","category":"general","target":"allgrp","algo":"random","multiplex":0,"stagger":0,"retries":0,"retry_delay":0,"detached":0,"queue":0,"chain":"","chain_error":"","notify_success":"","notify_fail":"","web_hook":"","web_hook_start":"","web_hook_error":0,"cpu_limit":0,"cpu_sustain":0,"memory_limit":0,"memory_sustain":0,"log_max_size":0,"notes":"","id":"ekkog584p1r","modified":1640585906,"created":1612297234,"username":"admin","salt":""},{"enabled":1,"params":{"duration":"7","progress":1,"burn":0,"action":"Success","secret":"Will not be shown in Event UI"},"timing":{"minutes":[29],"hours":[16]},"max_children":1,"timeout":3600,"catch_up":0,"queue_max":1000,"timezone":"America/New_York","plugin":"testplug","title":"03_wf_step_three","category":"general","target":"allgrp","algo":"random","multiplex":0,"stagger":0,"retries":0,"retry_delay":0,"detached":0,"queue":0,"chain":"","chain_error":"","notify_success":"","notify_fail":"","web_hook":"","cpu_limit":0,"cpu_sustain":0,"memory_limit":0,"memory_sustain":0,"log_max_size":0,"notes":"Randomly Generated Job","id":"ekko474ip05","modified":1612296599,"created":1612277167,"username":"admin","salt":"","silent":0,"graph_icon":"f111","args":"","ticks":"","web_hook_start":"","web_hook_error":0},{"enabled":1,"params":{"duration":"10","progress":1,"burn":0,"action":"Success","secret":"Will not be shown in Event UI"},"timing":false,"max_children":1,"timeout":3600,"catch_up":0,"queue_max":1000,"timezone":"America/New_York","plugin":"testplug","title":"02_wf_step_two","category":"general","target":"allgrp","algo":"random","multiplex":0,"stagger":0,"retries":0,"retry_delay":0,"detached":0,"queue":0,"chain":"","chain_error":"","notify_success":"","notify_fail":"","web_hook":"","cpu_limit":0,"cpu_sustain":0,"memory_limit":0,"memory_sustain":0,"log_max_size":0,"notes":"wf step 2","id":"ekko473os04","modified":1612296610,"created":1612277166,"username":"admin","salt":"","silent":0,"graph_icon":"f111","args":"","ticks":"","web_hook_start":"","web_hook_error":0},{"enabled":1,"params":{"duration":"14","progress":1,"burn":0,"action":"Success","secret":"Will not be shown in Event UI"},"timing":false,"max_children":1,"timeout":3600,"catch_up":0,"queue_max":1000,"timezone":"America/New_York","plugin":"testplug","title":"01_wf_step_one","category":"general","target":"allgrp","algo":"random","multiplex":0,"stagger":0,"retries":0,"retry_delay":0,"detached":0,"queue":0,"chain":"","chain_error":"","notify_success":"","notify_fail":"","web_hook":"","cpu_limit":0,"cpu_sustain":0,"memory_limit":0,"memory_sustain":0,"log_max_size":0,"notes":"Randomly Generated Job","id":"ekko472v803","modified":1612296628,"created":1612277165,"username":"admin","salt":"","silent":0,"graph_icon":"f111","args":"","ticks":"","web_hook_start":"","web_hook_error":0},{"enabled":1,"params":{"script":"#!/usr/bin/env bash\n\n# Cronicle injects some metadata to stdin \n# please note - stdin will be supressed if using tty option\n# also, printing JSON strings might cause issues (cronicle tries to interpret them)\ninput=\"$(cat - )\"\necho \"JSON data from stdin:\"\necho \"--> $input\"\n# most of the items from stdin JSON are available as env variables (e.g. JOB_ID)\n\necho \"------------------------------------------------\"\n\necho \"reporting progress:\"\n sleep 2 && echo \" -- step1 completed (10%)\" && echo 10%\n sleep 2 && echo \" -- step2 completed (50%)\" && echo 50%\n sleep 2 && echo \" -- step3 completed (90%)\" && echo 90%\n sleep 1\n\n# reporting performance \"Interpret JSON\" should be checked\necho '{\"perf\":{\"step3\":55,\"step2\":30,\"step1\":20}}'\n\n# alter chain reaction. Chain data can be sent to stdin of the new job\necho '{ \"chain\": \"ekko473os04\", \"chain_data\": { \"custom_key\": \"foobar\", \"value\": 42 } }'  # on success\necho '{ \"chain_error\": \"ekko473os04\" }'  # chain event on failure\n\n# alter email notification\necho '{ \"notify_success\": \"admin@cronicle.com\" }'\necho '{ \"notify_fail\": \"\" }'\n\n# paramter placeholders. Requires \"Resolve parameters\" to be checked\n# below example populates params.sql.demo value (from config)\necho sample parameter from config: \"[/sql/demo]\"\n\n# arguments (let non-editor users to parametrize script)\necho argument1: $ARG1  # as env variable\necho argument2: [/ARG2] # as parameter. Requires \"Resolve parameters\" to be checked\n\n# PLUGIN_SECRET a string you can set in plugin options.\n# It's injected as env variable to the running job, and never gets back to UI\necho plugin secret: $PLUGIN_SECRET","annotate":0,"json":1,"lang":"shell","theme":"gruvbox-dark","sub_params":1},"timing":{"minutes":[50],"hours":[23]},"max_children":1,"timeout":3600,"catch_up":0,"queue_max":1000,"timezone":"America/New_York","plugin":"shellplug","title":"shell_demo","category":"ckkog7wj41t","target":"allgrp","algo":"random","multiplex":0,"stagger":0,"retries":0,"retry_delay":0,"detached":0,"queue":0,"chain":"","chain_error":"","notify_success":"","notify_fail":"","web_hook":"","cpu_limit":0,"cpu_sustain":0,"memory_limit":0,"memory_sustain":0,"log_max_size":0,"notes":"Randomly Generated Job","id":"ekko4719i01","modified":1613680392,"created":1612277163,"username":"admin","salt":"","silent":0,"graph_icon":"f111","args":"New_York, 33","ticks":"2021-02-05 11:58","web_hook_start":"","web_hook_error":0}]}
global/servers - {"page_size":50,"first_page":0,"last_page":0,"length":1,"type":"list"}
global/servers/0 - {"type":"list_page","items":[{"hostname":"acad6ba3015a","ip":"172.17.0.3"}]}
global/api_keys - {"page_size":50,"first_page":0,"last_page":0,"length":0,"type":"list"}
global/api_keys/0 - {"type":"list_page","items":[]}
global/conf_keys - {"page_size":50,"first_page":0,"last_page":0,"length":25,"type":"list"}
global/conf_keys/0 - {"type":"list_page","items":[{"id":"base_app_url","title":"base_app_url","key":"http://localhost:3012","description":"overrides app url displayed in notifications"},{"id":"ad_domain","title":"ad_domain","key":"corp.cronicle.com","description":"default AD domain for external auth. You can also prepend domain to the username (e.g. user@domain.com)"},{"id":"smtp_hostname","title":"smtp_hostname","key":"mailrelay.cronicle.com","description":"SMTP server (port 25 is used default)"},{"id":"email_from","title":"email_from","key":"admin@cronicle.com","description":"Notification sender"},{"id":"admin_web_hook","title":"admin_web_hook","key":"","description":"Webhook for activity log notifications. Uses slack markdown.\nTip: use cronicle run api to handle notification with custom event"},{"id":"custom_live_log_socket_url","title":"custom_live_log_socket_url","key":"http://localhost:3012","description":"!this requires browser page refresh\noverrides the host for live log connection. On multinode cluster this can be assigned to each node, e.g. \ncustom_live_log_socket_url.manager\ncustom_live_log_socket_url.worker1\nCan specify custom port too. This is useful if using reverse proxy or docker/swarm"},{"id":"web_hook_text_templates_job_complete","title":"web_hook_text_templates.job_complete","key":"✔️ *[event_title]* completed successfully on [hostname] <[job_details_url] | More details>","description":"Success notification (slack markdown by default)"},{"id":"web_hook_text_templates_job_failure","title":"web_hook_text_templates.job_failure","key":"❌ *[event_title]* failed on [hostname]: Error: _*[description]*_ <[job_details_url] | More details>","description":"Error notification (slack markdown by default)"},{"id":"web_hook_text_templates_job_start","title":"web_hook_text_templates.job_start","key":"🚀 *[event_title]* started on [hostname] <[job_details_url] | More details>","description":"Start notification (slack markdown by default)"},{"id":"web_hook_text_templates_job_warning","title":"web_hook_text_templates.job_warning","key":"⚠️ *[event_title]* completed with warning on [hostname]: Warning: _*[description]*_ <[job_details_url] | More details>","description":"Warning notification. Warning is exit code 255 (-1) and it's treaded as success"},{"id":"web_hooks_slack_general","title":"web_hooks.slack_general","key":"https://hooks.slack.com/services/yourIncomingWebHook","description":"You can add webhook info under web_hooks object and then use property name (e.g. slack_general) to specify that webhook in notification options, instead of using full url. Use either url string (like this example) or object to specify custom data/options/headers and some other items (see example below)"},{"id":"web_hooks_slack_info_data_channel","title":"web_hooks.slack_info.data.channel","key":"cronicle","description":"Add custom key to request body (e.g. to specify channel)"},{"id":"web_hooks_slack_info_textkey","title":"web_hooks.slack_info.textkey","key":"markdown","description":"By default cronicle message is added as <b>text</b> key on webhook request body. Use this config if you need to use something else (e.g. markdown, html, etc). You can specify nested key too using dot notation e.g. 'data.mytextkey'"},{"id":"web_hooks_slack_info_compact","title":"web_hooks.slack_info.compact","type":"bool","key":false,"description":"(Notification webhooks only) Include only basic info in payload (id, title, action) and your custom data. Useful in case of key conflicts"},{"id":"web_hooks_slack_info_token","title":"web_hooks.slack_info.token","key":"xoxp-xxxxxxxxx-xxxx","description":"This is a shortcut for web_hooks.slack_info.headers.Authorization = Bearer xoxp-xxxxxxxxx-xxxx"},{"id":"web_hooks_slack_info_url","title":"web_hooks.slack_info.url","key":"https://slack.com/api/chat.postMessage","description":"Specify webhook url (for object). If using incoming webhooks then just specify it as string (see slack_general example above)"},{"id":"oninfo_web_hook","title":"oninfo_web_hook","key":"","description":"Special webhook - will fire on info message, e.g. server startup/restart/error. Those messages appear on activity log"},{"id":"universal_web_hook","title":"universal_web_hook","key":"","description":"Special webhook - will fire on each job start/completion"},{"id":"onupdate_web_hook","title":"onupdate_web_hook","key":"","description":"Special webhook - will fire on metadata update (e.g. on event update)"},{"id":"ui_live_log_ws","title":"ui.live_log_ws","type":"bool","key":false,"description":"Turns on classic websocket api for live log"},{"id":"params_demo","title":"params.sql.demo","key":"SELECT * FROM\nSOMETABLE s \nWHERE s.col = 30","type":"text/x-sql","description":" params config (object) can be used to set placeholders in shell scripts. You need to check 'resolve parameters' box in event parameters. To set placeholder use square braket syntax, e.g. for this parameter you should use [/sql/demo]"},{"id":"git_enabled","title":"git.enabled","type":"bool","key":false,"description":"Sync up data folder with remote git repository. To push data press backup button on scheduled event page.\n Should init git repo in data folder first. You can also set remote, branch and user via config (default is origin/master/cronicle)"},{"id":"git_auto","title":"git.auto","type":"bool","key":false,"description":"If git is enabled this option will trigger git sync on each metadata update (e.g. on event change)"},{"id":"git_add","title":"git.add","key":"global,users","description":"List of folders/files to sync via git sync. Global and user folders are default (covers metadata).\n Add 'logs' folder to keep trends/activity logs and 'jobs' for entire job logs"},{"id":"_read_me_","title":"_read_me_","key":"please read","description":"Those keys are applied right after storage and webserver init, and then can be updated at runtime (no need to restart cronicle). Please note that you cannot override storage/webserver parameters.\nTo add nested config (object) use dot syntax, e.g. servers.host1. If you convert some nested key into string it would erase related subkeys from config object. In this case just remove that string key and click reload button . To check actual config state use <b>Config Viewer</b> link"}]}
global/secrets - {"page_size":50,"first_page":0,"last_page":0,"length":1,"type":"list"}
global/secrets/0 - {"type":"list_page","items":[{"id":"globalenv","encrypted":false,"target":null,"form":"props","data":"# dotenv style key/value pairs representing env variables\nmyvar = some_value"}]}
